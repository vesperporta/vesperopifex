/** * @author:		Laurence Green * @email:		contact@laurencegreen.com * @www:		http://www.laurencegreen.com/ * @code:		http://vesper-opifex.googlecode.com/ * @blog:		http://vesperopifex.blogspot.com/ * The MIT LicenseCopyright (c) 2008-2009 Laurence GreenPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. */package com.vesperopifex.display.book.utils {	import com.vesperopifex.display.book.GraphicAnimatedPage;	import com.vesperopifex.display.book.GraphicPage;	import com.vesperopifex.display.book.IChapter;	import com.vesperopifex.events.PageManagerEvent;	import com.vesperopifex.utils.LanguageObject;	import com.vesperopifex.utils.Settings;		import flash.display.DisplayObject;	import flash.display.Sprite;		public class PageManager extends Sprite	{		public static const BOOK_ROOT:String			= "root";		public static const PAGE_CHANGE_DIRECT:String	= "change_direct";		public static const PAGE_CHANGE_LINEAR:String	= "change_linear";				protected var _ROOT:GraphicPage					= null;		protected var _currentPage:String				= Settings.PAGE_DELIMINATOR;				public function get currentPage():String { return _currentPage; }				/**		 * setter language :: set the language determined by the paramter value.		 * @param	value	<String>	The language code to be used in this instance, see the chart below for details of the available language codes.			available languages are:				Language				value				Czech					cs				Danish					da				Dutch					nl				English					en				Finnish					fi				French					fr				German					de				Hungarian				hu				Italian					it				Japanese				ja				Korean					ko				Norwegian				no				Other/unknown			xu				Polish					pl				Portuguese				pt				Russian					ru				Simplified Chinese		zh-CN				Spanish					es				Swedish					sv				Traditional Chinese		zh-TW				Turkish					tr			see http://www.ietf.org/rfc/rfc4646.txt for further details		 */		public function set language(value:String):void 		{			var item:String	= null;			for each (item in LanguageObject.LANGUAGE_CODES) if (value == item) Settings.LANGUAGE = value;			if (!Settings.LANGUAGE) Settings.LANGUAGE	= Settings.DEFAULT_LANGUAGE;		}				/**		 * PageManager :: Constructor		 */		public function PageManager() 		{			super();		}				/**		 * build :: Build the heirachial tree for the pages		 * @param	xml	<XMLList>	data containing the relevant pages and content.		 */		public function build(data:XML, chapter:GraphicPage = null):GraphicPage 		{			var chap:GraphicPage	= null;			if (chapter) chap		= chapter;			else 			{				_ROOT				= new GraphicAnimatedPage(BOOK_ROOT, data);				chap				= _ROOT;			}			chap.manager			= this;			chap.addEventListener(PageManagerEvent.EXIT, pageChangeHandler);			return chap;		}				/**		 * add :: create and add a chapter or a page to the passed chapter.		 * @param	chapter	<Chapter>	Chapter to add pages to.		 * @param	data	<XMLList>	page listing in XMLList format.		 */		protected function add(chapter:GraphicPage, data:XML):void 		{			/*			var page:GraphicPage	= null;			for each (var item:XML in data.page) 			{				if (Boolean(item.@active)) 				{					if (item.page.length()) 					{						page = createChapter(item.@classtype, item, Settings.LANGUAGE);						add(page, item);					} else page = createPage(item.@classtype, item, Settings.LANGUAGE);					AudioManager.checkPageAudioEvents(page, item);					page.addEventListener(PageManagerEvent.EXIT, pageChangeHandler);					chapter.add(page);				}			}			*/		}				/**		 * createPage :: create a Page object to return.		 * @param	id	<String>	identifying String object to identify the Page object.		 * @param	xml	<XMLList>	data to be passed to the page object.		 * @return	<Page>	a generic Page object.		 */		protected function createPage(classID:String, xml:XML, lang:String = null):GraphicPage 		{			/*			var id:String = xml.@id;			trace(Settings.FRAMEWORK + "Page\t\t::\t" + classID + "\t>\t" + id);						switch (classID) 			{				case "GraphicPage":					return new GraphicPage(id, xml);				case "PreloadChapter":					return new PreloadChapter(id, xml, lang);				default:					return new PageDefault(id, xml);			}			*/			return null;		}				/**		 * createChapter :: create a Chapter object to return.		 * @param	id	<String>	identifying String object to identify the Chapter object.		 * @param	xml	<XMLList>	data to be passed to the Chapter object.		 * @return	<Chapter>	a generic Chapter object.		 */		protected function createChapter(classID:String, xml:XML, lang:String = null):GraphicPage 		{			/*			var id:String = xml.@id;			trace(Settings.FRAMEWORK + "Chapter\t::\t" + classID + "\t>\t" + id);						switch (classID) 			{				case "GraphicChapter":					return new GraphicChapter(id, xml);				case BOOK_ROOT:					return new Chapter(classID, xml);			    default:			        return new ChapterDefault(id, xml);			}			*/			return null;		}				/**		 * findPage :: find a specific page determined by the heirachial linkage through an Array.		 * 	through each i is an index of a page within a branch of the site tree.		 * @param	index	<Array>	page indexes through heirachial nodes acording to the id for each object in the array.		 */		public function findPage(index:Array):GraphicPage 		{			var parentPage:GraphicPage	= _ROOT as GraphicPage;			var page:GraphicPage		= null;			for (var i:int = 0; i < index.length; i++) 			{				page					= parentPage.getChild(index[i]);				if (!page) return null;				else parentPage			= page;			}			return page;		}				/**		 * createStructure :: recurse through all IChapter objects in the framework and return their children in the form of an multi layered Array object.		 * @param	chapter	<IChapter>	unrequired paramater though if used on an IChapter object farther down the hierarchy of pages and will return the full page listing of each sub-page down the heirachy.		 * @return	<Array>	a multi-layered Array object which details the structure of the entire framework at the time of the method call.		 */		public function createStructure(parentPage:IChapter = null):Array 		{			var _parentPage:IChapter	= (parentPage)? parentPage: _ROOT;			var rtn:Array				= _parentPage.children;			var _length:uint			= _parentPage.length;			var i:uint					= 0;			for (i; i < _length; i++) if (rtn[i] is IChapter) rtn[i] = createStructure(rtn[i]);			return rtn;		}				/**		 * openPage :: open a specific page determined by the heirachial linkage through an Array.		 * 	through each i is an index of a page within a branch of the site tree.		 * @param	index	<Array>	page indexes through heirachial nodes acording to the id for each object in the array.		 */		public function openPage(index:Array):void 		{			var parentPage:GraphicPage	= _ROOT;			var page:GraphicPage		= null;			for (var i:int = 0; i < index.length; i++) 			{				page = parentPage.getChild(index[i]);				if (!page) 				{					openPage(Settings.deeplink);					return;				} else parentPage = page;			}			page.open();			if (page.path != _currentPage) _currentPage = page.path;		}				/**		 * pageChangeHandler :: an event handler to deal with the changing of Page's and Chapter's.		 * @param	event	<PageManagerEvent>		 */		public function pageChangeHandler(event:PageManagerEvent):void 		{			var page:GraphicPage = event.target as GraphicPage;			openPage(page.pageReference);		}			}	}